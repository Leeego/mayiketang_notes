					                      最全Redis集群方案

Redis3.0版本之前只支持单实例模式,单实例模式限制了Redis没法满足业务的需求。
Redis3.0版本加入集群功能。
各大企业在 3.0 版本还没发布前为了解决 Redis 的存储瓶颈，纷纷推出了各自的 Redis 集群方案。
这些方案的核心思想是把数据分片（sharding）存储在多个 Redis 实例中，每一片就是一个 Redis 实例。

1.客户端分片(把分片的逻辑放在Redis客户端实现,通过Redis客户端预先定义好的路由规则,把对Key的访问转发到不同的Redis实例中,最后把返回结果汇集。)
  客户端分片的模式
  客户端分片的好处是所有的逻辑都是可控的，不依赖于第三方分布式中间件。开发人员清楚怎么实现分片、路由的规则，不用担心踩坑。

　客户端分片方案有下面这些缺点:
  .这是一种静态的分片方案，需要增加或者减少 Redis 实例的数量，需要手工调整分片的程序。
  .可运维性差，集群的数据出了任何问题都需要运维人员和开发人员一起合作，减缓了解决问题的速度，增加了跨部门沟通的成本。
  .在不同的客户端程序中，维护相同的分片逻辑成本巨大。例如，系统中有两套业务系统共用一套 Redis 集群，一套业务系统用 Java 实现，另一套业务系统用 PHP 实现。为了保证分片逻辑的一致性，在 Java 客户端中实现的分片逻辑也需要在 PHP 客户端实现一次。相同的逻辑在不同的系统中分别实现，这种设计本来就非常糟糕，而且需要耗费巨大的开发成本保证两套业务系统分片逻辑的一致性。

============================================================
2.Twemproxy(Twemproxy是由Twitter开源的Redis代理,其原理:Redis客户端把请求发送到Twemproxy,Twemproxy根据路由规则发送到正确的Redis实例,最后Twemproxy把结果汇集返回给客户端。)
  Twemproxy通过引入一个代理层，将多个 Redis 实例进行统一管理，使 Redis 客户端只需要在 Twemproxy 上进行操作，而不需要关心后面有多少个 Redis 实例，从而实现了 Redis 集群。
  Twemproxy 集群架构
　　.Twemproxy 的优点如下:
    客户端像连接 Redis 实例一样连接 Twemproxy，不需要改任何的代码逻辑。
    .支持无效 Redis 实例的自动删除。
    .Twemproxy 与 Redis 实例保持连接，减少了客户端与 Redis 实例的连接数。

　　Twemproxy 有如下不足:
    .由于 Redis 客户端的每个请求都经过 Twemproxy 代理才能到达 Redis 服务器，这个过程中会产生性能损失。
    .没有友好的监控管理后台界面，不利于运维监控。
    .最大的问题是 Twemproxy 无法平滑地增加 Redis 实例。对于运维人员来说，当因为业务需要增加 Redis 实例时工作量非常大。

　　Twemproxy 作为最被广泛使用、最久经考验、稳定性最高的 Redis 代理，在业界被广泛使用。

============================================================
3.Codis(Twemproxy 不能平滑增加 Redis 实例的问题带来了很大的不便，于是豌豆荚自主研发了 Codis，一个支持平滑增加 Redis 实例的 Redis 代理软件，其基于 Go 和 C 语言开发，并于 2014 年 11 月在 GitHub 上开源。)
  Codis包含下面4个部分:
  1.Codis Proxy:Redis 客户端连接到 Redis 实例的代理，实现了 Redis 的协议，Redis 客户端连接到 Codis Proxy 进行各种操作。Codis Proxy 是无状态的，可以用 Keepalived 等负载均衡软件部署多个 Codis Proxy 实现高可用。
  2.Codis Redis:Codis 项目维护的 Redis 分支，添加了 slot 和原子的数据迁移命令。Codis 上层的 Codis Proxy 和 Codisconfig 只有与这个版本的 Redis 通信才能正常运行。
  3.Codis Config:Codis 管理工具。可以执行添加删除 CodisRedis 节点、添加删除 Codis Proxy、数据迁移等操作。另外，Codisconfig 自带了 HTTP server，里面集成了一个管理界面，方便运维人员观察 Codis 集群的状态和进行相关的操作，极大提高了运维的方便性，弥补了 Twemproxy 的缺点。
  4.Zookeeper:分布式的、开源的应用程序协调服务，是 Hadoop 和 Hbase 的重要组件，其为分布式应用提供一致性服务，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。Codis 依赖于 ZooKeeper 存储数据路由表的信息和 Codis Proxy 节点的元信息。另外，Codisconfig 发起的命令都会通过 ZooKeeper 同步到 CodisProxy 的节点。

============================================================
4.Redis3.0集群
  （1） Redis 客户端在 Redis2 实例上访问某个数据。
　（2） 在 Redis2 内发现这个数据是在 Redis3 这个实例中，给 Redis 客户端发送一个重定向的命令。
  （3） Redis 客户端收到重定向命令后，访问 Redis3 实例获取所需的数据。

 redis3.0的集群方案有以下两个问题:
 ①.一个Redis实例具备了"数据存储"和"路由重定向",完全去中心化的设计。
    优点:这带来的好处是部署非常简单，直接部署 Redis 就行，不像 Codis 有那么多的组件和依赖。
    缺点:但带来的问题是很难对业务进行无痛的升级，如果哪天 Redis 集群出了什么严重的 Bug，就只能回滚整个 Redis 集群。 
 ②. 对协议进行了较大的修改,对应的Redis客户端也需要升级。升级 Redis 客户端后谁能确保没有 Bug？而且对于线上已经大规模运行的业务，升级代码中的 Redis 客户端也是一个很麻烦的事情。
  
综合上面所述的两个问题，Redis 3.0 集群在业界并没有被大规模使用。

============================================================
5.云服务器上的集群服务
  特性:
   1.动态扩容(扩容的过程中服务部不需要中断或停止，整个扩容过程对用户透明、无感知)
   2.数据多备(数据保存在一主一备两台机器中，其中一台机器宕机了，数据还在另外一台机器上有备份)
   3.自动容灾(主机宕机后系统能自动检测并切换到备机上，实现服务的高可用)
   4.实惠
  














   
