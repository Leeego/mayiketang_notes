table | type | possiblekeys | key | keylen | ref | rows | Extra

1.table---显示这一行的数据是关于哪张表的
2.type--重要的列,显示连接使用了何种类型。从最好到最差连接类型为:system、const、eq_reg、ref、range、index、All
说明：不同连接类型的解释（按照效率高低的顺序排序）
-System:表只有一行:system表。这是const连接类型的特殊情况。
-Const:表中的一个记录的最大值能够匹配这个查询(索引可以是主键或唯一索引)。因为只有一行,这个值实际就是常数,因为Mysql先读这个值然后把它当做常数来对待。
-eq_ref:在连接中,Mysql在查询时,从前面的表中,对每一个记录的联合都从表中读取一个记录,它在查询使用了索引为主键或唯一键的全部时使用。
-ref:这个连接类型只有在查询使用了不是唯一或主键的键或者是这些类型的部分(比如,利用最左前缀)时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少―越少越好。
-range:这个连接类型使用索引返回一个范围中的行,比如使用>或<查找东西时发生的情况。
-index:这个连接类型对前面的表中的每一个记录联合进行完全扫描(比All更好,因为索引一般小于表数据)。
-All:这个连接类型对于前面的每一个记录联合进行完全扫描,这一般比较糟糕,应该尽量避免。
3.possible_keys--显示可能应用在这张表中的索引。如果为空,没有可能的索引。可以为相关的域从 WHERE 语句中选择一个合适的语句。
4.key--实际使用的索引。如果为NULL,则没有使用索引。
5.key_len--使用索引的长度。在不损失精确性的情况下,长度越短越好。
6.ref--显示索引的哪一列被使用了,如果可能的话,是一个常数。
7.rows--MySql认为必须要检查的用来返回请求数据的行数。
8.Extra--关于 MYSQL 如何解析查询的额外信息。Using temporary 和 Using filesort，意思 MYSQL 根本不能使用索引，结果是检索会很慢

说明：extra 列返回的描述的意义
Distinct ：一旦 mysql 找到了与行相联合匹配的行，就不再搜索了。
Not exists ：mysql 优化了 LEFT JOIN，一旦它找到了匹配 LEFT JOIN 标准的行，就不再搜索了。
Range checked for each Record（index map:#） ：没有找到理想的索引，因此对从前面表中来的每一个行组合，mysql 检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一。
Using filesort ：看到这个的时候，查询就需要优化了。mysql 需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行。
Using index ：列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候。
Using temporary ：看到这个的时候，查询需要优化了。这里，mysql 需要创建一个临时表来存储结果，这通常发生在对不同的列集进行 ORDER BY 上，而不是 GROUP BY 上。
Where used ：使用了 WHERE 从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型 ALL 或 index，这就会发生，或者是查询有问题。
因此，弄明白了 explain 语法返回的每一项结果，我们就能知道查询大致的运行时间了，如果查询里没有用到索引、或者需要扫描的行过多，那么可以感到明显的延迟。因此需要改变查询方式或者新建索引。mysql 中的 explain 语法可以帮助我们改写查询，优化表的结构和索引的设置，从而最大地提高查询效率。当然，在大规模数据量时，索引的建立和维护的代价也是很高的，往往需要较长的时间和较大的空间，如果在不同的列组合上建立索引，空间的开销会更大。因此索引最好设置在需要经常查询的字段中。



