							CAP理论/Base理论(基本可用,软状态,最终一致性)
===================================================================
知识稍微宽泛点的工程师会把其作为衡量系统设计的准则。
CAP理论:任何分布式系统在 可用性、一致性、分区容错性方面,不能兼得,最多只能得其二,因此,任何分布式系统的设计只是在三者中的不同取舍而已。

===================================================================
1.CAP的历史
C（一致性）：所有的节点上的数据时刻保持同步
A（可用性）：每个请求都能接受到一个响应，无论响应成功或失败
P（分区容错）：系统应该能持续提供服务，即使系统内部有消息丢失（分区）
高可用、数据一致是很多系统设计的目标,但是分区又是不可避免的事情:
-CA without P:如果不要求P(不允许分区),则C(强一致性)和A(可用性)是可以保证的。但其实分区不是你想不想的问题,而是始终会存在,因此CA的系统更多的是允许分区后各子系统依然保持CA。
-CP without A:如果不要求A(可用),相当于每个请求都需要在 Server 之间强一致，而 P（分区）会导致同步时间无限延长，如此 CP 也是可以保证的。很多传统的《数据库分布式事务》都属于这种模式。
-AP without C:要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。现在众多的《NoSQL》 都属于此类。
===================================================================
.C:一致性被称为原子对象,任何的读写都应该看起来是"原子"的,或串行的。写后面的读一定能读到前面写的内容。所有的读写请求都好像被全局排序。
.A:对任何非失败节点都应该在有限时间内给出请求的回应。(请求的可终止性)
.P:允许节点之间丢失任意多的消息,当网络分区发生时,节点之间的消息可能会完全丢失。

===================================================================
可用性和一致性是分布式系统的属性，而分区却是网络的一个属性。不能再问题发生时是否选择要不要分区，而是应该在分区既定的情况下选择要一致性还是可用性。网络分区会发生在两种情况：
.交换机失败，导致网络发生错误，网络被分成几个子网
.机器延迟或死机，导致某些 server 失去联系
CAP 比较合理的表达方式应该是：在一个允许网络发生故障的系统中，该选择一致性还是可用性？
===================================================================
如何看待CAP?
CAP并不适合在作为一个适应任何场景的定理,它的正确性更加适合基于原子读写的 NoSQL 场景。
而无论如何 C、A、P 这个三个概念始终存在任何分布式系统，只是不同的模型会对其有不同的呈现，可能某些场景对三者之间的关系敏感，而另一些不敏感。


蚂蚁课堂地址CAP理论:http://bbs.itmayiedu.com/article/1505907235188





















