一、《查看、添加、提交、删除、找回，重置修改文件》		
git help  <command>      #显示command的help         		 git help checkout
git show                 #显示某次提交的内容  git show $id    	 git show 5185e461ae146b1c716f2ca83b818a49fd3bdd9d
===============1.[add][之前]撤回修改内容,add之后就无效 =================
git checkout <file>                     #抛弃工作区修改内容(修改内容回退)         git checckout test.txt
git checkout .                          #抛弃所有工作区修改                       git checkout .
--注:
  所有抛弃工作区修改都是在未提交之前,commit之后就无法回退、撤回。

<--切换分支、创建分支-->
git checkout <other_branch>                   #切换到某个分支
git checkout -b <new_branch>                  #创建新的分支,并且切换过去
git checkout -b <new_branch> <other_branch>   #基于branch创建新的new_branch
git checkout $id                              #把某次历史提交记录checkout出来.[但无分支信息，切换到其他分支会自动删除] 例如:
                                                git checkout 82a86307551f5d2655562a8c9f9c7a0af4a690e3
git checkout $id -b <new_branch>              #把某次历史提交记录checkout出来，创建成一个分支,并且自动切换到该分支

===============2.将修改文件添加工作区===================
git add <file>  #将修改的文件提交到本地暂存区                    git add usename.txt
git add .       #将[所有]修改过的工作文件提交暂存区              git add .
git add *       #[正则过滤]提交的文件				 git add a*.txt

===============3.[commit][之后]撤回修改内容===================
git rm  <file>           #从版本库中删除文件,会物理删除文件               git rm usename.txt 【rm会物理删除文件,慎用】
git rm  <file> --cached  #从版本库中删除文件，但不物理删除文件            git rm user.txt --cached     ????测试无效？？？？

===============4.add之后通过reset恢复到[add之前]状态,commit之后无法恢复==============================
git reset <file> # 从暂存区恢复到工作文件                        git reset user.txt
git reset -- .   # 从暂存区恢复到工作文件                        git reset -- .
git reset --hard # 恢复最近一次提交过的状态，即[放弃]上次提交后的[所有本次修改]    git reset --hard 【add之后reset --hard直接物理删除文件,慎用】  ???????????....???????????

================5. git commit 主要是将暂存区里的改动给提交到本地的版本库。每次使用git commit 命令我们都会在本地版本库生成一个40位的哈希值，这个哈希值也叫commit-id，commit-id在版本回退的时候是非常有用的，它相当于一个快照,可以在未来的任何时候通过与git reset的组合命令回到这里.==================================
git commit  <file> 			 #将暂存区里的[某个改动文件]给提交到本地的版本库
git commit  .                            #将暂存区[所有改动文件]提交到本地的版本库
git commit  -a                           #将git add, git rm和git ci等操作都合并在一起做[在修改文件后，需要使用git add把文件加入					暂存区，这样git commit时才能把已经修改的信息加入版本库，而使用git commit -a可以不用再git                                          add。]　　　　　　　　　　　　　　　　　　　　
git commit  -am "some comments"
git commit  --amend                      # 修改最后一次提交记录

================6.撤回到历史版本===============================
git revert <$id>   #恢复某次提交的状态,恢复动作本身也创建次提交对象   撤回指定commit-id
git revert HEAD    #恢复最后一次提交的状态  撤销前一次 commit
git revert HEAD^   #撤销前前一次 commit


二、《查看文件diff》
git diff <file>                #比较当前文件和暂存区文件差异git diff
git diff <id1><id1><id2>       # 比较两次提交之间的差异
git diff <branch1>..<branch2>  # 在两个分支之间比较
git diff --staged              # 比较暂存区和版本库差异
git diff --cached              # 比较暂存区和版本库差异
git diff --stat                # 仅仅比较统计信息



三、查看提交记录
git log <file>    #查看该文件每次提交记录            git log user.txt
git log -p <file> #查看每次详细修改内容的diff        git log -p test.txt
git log -p -2     #查看最近两次详细修改内容的diff    git log -p -4
git log --stat    #查看提交统计信息		     git log --stat
	
Git本地分支管理
一、查看、切换、创建、删除分支
<--查看分支-->
git branch -r              #查看远程分支(remote)
git branch                 #查看本地分支
git branch <new_branch>    #创建新的本地分支
git branch -v              #查看各个分支最后提交信息
git branch --merged        #查看已经被合并到当前分支的分支
git branch --no-merged     #查看尚未被合并到当前分支的分支
<--删除分支-->
git branch -d <branch>                  # 删除某个分支  git branch -d lxd
git branch -D <branch>                  # <强制删除>某个分支 (未被合并的分支被删除的时候需要强制)


二、分支合并和rebase
git merge <branchname>                  # 将某个分支合并到《当前分支》 Fast-Foward合并(快进合并)
git merge origin/master --no-ff         # 不要Fast-Foward合并，这样可以生成merge提交
git rebase master <branch>              # 将master rebase到branch，相当于： git co <branch> && git rebase master && git co master && git merge <branch>

三、Git补丁管理(方便在多台机器上开发同步时用)
git diff > ../sync.patch          # 生成补丁
git apply ../sync.patch           # 打补丁
git apply --check ../sync.patch   #测试补丁能否成功

四、Git暂存管理
git stash          # 暂存会把所有未提交(未commit)的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录,通过git                     stash命令推送一个新的储藏，当前的工作目录就干净了,stash是本地的，不会通过git push命令上传到git server上
git stash list     # 列出所有stash
git stash apply    # 恢复暂存的内容
git stash drop     # 删除暂存区

五、Git远程分支管理
git pull           #抓取远程仓库所有分支更新并合并到本地
git pull --no-ff   #抓取远程仓库所有分支更新并合并到本地,不要快进合并
git fetch origin   #抓取远程仓库更新


git push                                         #push<所有分支>
git push origin master                           #将<本地主分支>推到<远程主分支>
git push -u origin master                        #将<本地主分支>推到<远程>(如无远程主分支则创建，用于初始化远程仓库)
git push -u origin master -f                     #强制提交
git push origin <local_branch>                   #创建远程分支,origin是远程仓库名
git push origin <local_branch>:<remote_branch>   #创建远程分支
git push origin:<remote_branch>                  #先删除本地分支(git br -d <branch>)，然后再push删除远程分支


六、Git远程仓库管理
git remote -v           				             #查看远程服务器地址和仓库名称
git remote show origin   				             #查看远程服务器仓库状态
git remote add origin git@ github:robbin/robbin_site.git             #添加远程仓库地址
git remote set-url origin git@ github.com:robbin/robbin_site.git     #设置远程仓库地址(用于修改远程仓库地址) 
git remote rm <repository>                                           #删除远程仓库


七、创建远程仓库
git clone --bare  robbin_site robbin_site.git                     #用带版本的项目创建纯版本仓库
scp -r  my_project.git   git@ git.csdn.net:~                      #将纯仓库上传到服务器上
mkdir robbin_site.git && cd robbin_site.git && git --bare init    #在服务器创建纯仓库
git remote add origin git@ github.com:robbin/robbin_site.git      #设置远程仓库地址
git push -u origin master                                         #客户端首次提交
git push -u origin develop                                        #首次将本地develop分支提交到远程develop分支，并且track
git remote set-head origin master                                 #设置远程仓库的HEAD指向master分支
也可以命令设置跟踪远程库和本地库
git branch --set-upstream  master origin/master     
git branch --set-upstream  develop origin/develop

转载：http://www.cnblogs.com/cspku/articles/Git_cmds.html

八、初始化git
git init                #在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹.

九、获取一个url对应的远程Git repo
git clone
  获取一个url对应的远程Git repo, 创建一个local copy.
  一般的格式是git clone [url].
  clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定.

十、查询仓库状态
git status
   查询repo的状态.
   git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.

十一、显示一个分支提交历史log日志信息(show commit history of a branch)
git log
  git log --oneline		    #	
  git log --oneline --number:       #每条log只显示一行,显示number条。git log --oneline  -2
  git log --oneline --graph:        #可以图形化地表示出分支合并历史. git log --oneline --graph
  git log branchname                #可以显示特定分支的log.          git log master























 
