						Dubbo 分布式服务框架入门

要想了解 Dubbo 是什么，我们不防先了解它有什么用。
使用场景：比如我想开发一个网上商城项目，这个网上商城呢，比较复杂，分为 pc 端 web 管理后台，微信端销售公众号，那么我们分成四个项目，pc 端网站，微信端网站，还有一个后台服务项目，接口服务项目。

对数据库的操作的相关接口放到接口服务项目，这些接口的实现放在后台服务项目，pc 端网站和微信端网站都依赖接口服务项目，调用后台数据库数据。在这种场景下就是应该使用 Dubbo 这种分布式服务框架了。当然这只是 Dubbo 的一个最浅显的功能。

有些猿友可能会问到了，为什么搞那么多各项目啊，不是自找麻烦麽。当你一个项目越来越复杂的时候，是必须要怎么干的，至于为什么，慢慢会有体会。

下面我们马上介绍 Dubbo：

一、Dubbo 概念介绍（必须看！）
1.1、Dubbo 是什么？
Dubbo 是一个分布式服务框架，致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案。简单的说，dubbo 就是个服务框架，如果没有分布式的需求，其实是不需要用的，只有在分布式的时候，才有 dubbo 这样的分布式服务框架的需求，并且本质上是个服务调用的东东，说白了就是个远程服务调用的分布式框架

其核心部分包含:
1》远程通讯: 提供对多种基于长连接的 NIO 框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。
2》集群容错: 提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。
3》自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。

1.2. Dubbo 能做什么？

1.透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何 API 侵入。
2.软负载均衡及容错机制，可在内网替代 F5 等硬件负载均衡器，降低成本，减少单点。
3. 服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的 IP 地址，并且能够平滑添加或删除服务提供者。

1.3. dubbo 的架构

dubbo 架构图如下所示：



节点角色说明：
Provider: 暴露服务的服务提供方。
Consumer: 调用远程服务的服务消费方。
Registry: 服务注册与发现的注册中心。
Monitor: 统计服务的调用次调和调用时间的监控中心。
Container: 服务运行容器。

对于这些角色来说，其他都还好，Monitor 可能猿友们前期使用会把它忽略，但是后期会发现它的作用十分明显哦，如服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？为了解决这个问题，第一步，要将服务现在每天的调用量，响应时间，都统计出来，作为容量规划的参考指标。其次，要可以动态调整权重，在线上，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，直到响应时间到达阀值，记录此时的访问量，再以此访问量乘以机器数反推总容量。

调用关系说明：
0 服务容器负责启动，加载，运行服务提供者。
1 服务提供者在启动时，向注册中心注册自己提供的服务。
2 服务消费者在启动时，向注册中心订阅自己所需的服务。
3 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
4 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
5 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。

1.4. dubbo 使用方法

Dubbo 采用全spring配置方式，透明化接入应用，对应用没有任何 API 侵入，只需用 Spring 加载 Dubbo 的配置即可，Dubbo 基于 Spring 的 Schema 扩展进行加载。如果不想使用 Spring 配置，而希望通过 API 的方式进行调用（不推荐）
Dubbo 采用全 Spring 配置方式，透明化接入应用，对应用没有任何 API 侵入，只需用 Spring 加载 Dubbo 的配置即可，Dubbo 基于 Spring 的 Schema 扩展进行加载。



转自：http://bbs.itmayiedu.com/article/1495376255622





























