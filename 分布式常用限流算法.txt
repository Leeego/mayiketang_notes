					                 分布式常用限流算法
===========================================================
1.限流场景
  在开发高并发系统时,有很多方法可以用来保护系统:
  ①缓存
  ②降级
  ③限流等

  .缓存:提升系统访问速度,增大系统处理能力
  .降级:服务出现问题或影响核心流程的性能时,需要暂时屏蔽,待高峰过去或问题解决后再打开
  .限流:部分场景比如：稀缺资源（秒杀，抢购）、写服务（评论、下单）、频繁复杂查询（评论最后几页）等，需要限制这些场景的并发 / 请求量

 限流就是通过对并发访问/请求进行限速或一个时间窗口内的请求进行限速,从而达到保护系统的目的。
 一般系统可以通过《压测》来预估能处理的峰值，一旦达到设定的峰值阀值，则可以《拒绝服务》（定向错误页或告知资源没有了）、《排队》或《等待》（例如：秒杀、评论、下单）、《降级》（返回默认数据）

 限流不能乱用，否则正常流量会出现一些奇怪的问题，从而导致用户抱怨。

===========================================================
2.限流算法
 常见的限流算法:计数器、令牌桶、漏桶。
 ①.计数器
   计数器是最简单粗暴的算法。
   例如:一个服务每秒能处理 100 个请求。设置一个 1s 的滑动窗口，窗口有 10 个格子，每个格子 100ms，每 100ms 移动一次，每次移动都记录当前服务请求的次数。内存中保存最近 10 次的次数（LinkedList）。格子每次移动的时候判断一次，最后一个格子和第一个格子的次数是否相差 100，如果超过，则进行限流。
   当格子划分的越多，那么滑动窗口的滚动越平滑，限流的统计就会越精确。
 
 ②.令牌桶
   令牌桶算法是一个存放<固定容量令牌>(token)的<桶>,按照《固定速率》往桶里添加令牌。
   令牌桶的主要概念如下:
     .令牌按固定的速率被放入令牌桶中,例如: r tokens/秒
     .桶中最多存放b个令牌,当桶满时,新添加的令牌被丢弃或拒绝
     .当一个n字节大小的数据包到达,将从桶中删除n个令牌,接着数据包被发送到网络上
     .如果桶中的令牌不足n个,则不会删除令牌,且数据包将被限流(丢弃或在缓冲区等待)

   令牌桶根据存放令牌的速率(r tokens/s)去控制输出的速率(to network)

 ③.漏桶
    漏桶作为<计量工具>时,可用于<流量整形>和<流量控制>,漏桶的主要概念如下:
      .一个固定容量的漏桶,按照常量固定速率流出水滴(流出请求)
      .如果桶是空的,则不需流出水滴
      .可以以任意速率流入水滴到漏桶(流入请求)
      .如果流入水滴超出了桶的容量,则流入的水滴溢出了(新流入的请求被拒绝),则漏桶容量是不变的

   漏桶可以看做<固定容量>、<固定流出速率>的<队列>,漏桶限制的是<请求>的<流出速率>,《漏桶》中装的是《请求》。








