						   为什么字段上加索引,查询速度会变快
====================================================================
查看表是否有索引的命令:
show index from 表名;

====================================================================
看到主索引,索引类型是Btree(二叉树)
正是因为这个二叉树算法,让查询速度快很多,二叉树的原理,就是取最中间的一个数,然后把大于这个数的往右排,小于这个数的往左排,每次减半,然后依次类推,每次减半,形成一个树状结构图。
Mysql目前主要有以下几种索引类型:fulltext(myisam)、hash、btree、rtree。
那么，这几种索引有什么功能和性能上的不同呢？
====================================================================
1.FullText(全文索引)
 目前只有Myisam引擎支持。其可以在create table,alter table,create index使用,不过目前只有char、varchar、text列上可以创建全文索引。
在数据量较大时候,现将数据放入一个没有全局索引的表中,然后再用create index创建fulltext索引,要比先为一张表创建fulltext然后再将数据写入的速度快很多。
 全文索引并不是和myisam一起诞生的,它的出现是为了解决where name like "%word%"这类针对文本的模糊查询效率较低的问题。
 在没有全文索引之前,这样一个查询语句是要进行遍历数据表操作的,可见,在数据量较大时是极其耗时的,如果没有异步IO处理,进程将被挟持,很浪费时间。

全文索引的使用方法并不复杂：
创建Alter Table table Add Index FullText Using FullText(cname1,[,cname2...]);
使用Select * From table Where Match(cname1,[,cname2...]) Against("word" MODE);
其中,MODE为搜寻方式(in boolean mode,in natural language mode,in natural language mode with query expansion/with query expansion)。
简单地说,布尔模式,允许word里含一些特殊字符用于标记一些具体的要求,如+表示一定要有,-表示一定没有,*表示通用匹配符,类似正则。
自然语言模式,就是简单的单词匹配。
含表达式的自然语言模式,就是先用自然语言模式处理,对返回的结果,再进行表达式匹配。

对搜索引擎稍微有点了解的同学，肯定知道分词这个概念，FullText索引也是按照<分词原理>建立索引的。
西文中(英语)，大部分为字母文字，分词可以很方便的按照《空格》进行分割。
但很明显，中文不能按照这种方式进行分词。那又怎么办呢？
这里介绍一个Mysql的中文分词插件Mysqlcft,有了它，就可以对中文进行分词，想了解的同学请移步Mysqlcft，当然还有其他的分词插件可以使用。
====================================================================
Hash索引
 hash就是一种(key=>value)形式的键值对,允许多个key对应相同的value,但不允许一个key对应多个value。（key不可以重复,value可以重复）
正是由于这个特性,hash很适合做索引,为某一列或几列建立hash索引,就会利用这一列或几列的值通过一定的算法计算出一个hash值,对应一行或几行数据。
 在java语言中,每个类都有自己的hashcode()方法,没有显示定义的都继承自object类,该方法使得每一个对象都是唯一的,在进行对象间equal比较,
和序列化传输中起到了很重要的作用。
 hash的生成方法有很多种,足可以保证hash码的唯一性,例如:
 在mongoDB中,每一个document都有系统为其生成的唯一的objectID(包含时间戳,主机散列值,进程PID,自增ID)也是一种hash的表现。
由于hash索引可以一次定位,不需要像树形索引那样逐层查找,因此具有极高的效率。那为什么还需要其他的树形索引呢?

Mysql的Btree索引和Hash索引的区别?
(1)由于Hash索引比较的是进行hash运算之后的Hash值,所以它只能用于等值的过滤,不能用于基于范围的过滤,因为经过相应的Hash算法处理后的hash值的大小关系,并不能保证和Hash运算前完全一样。
(2)Hash索引无法被用来避免数据的排序操作,由于Hash索引中存放的是经过hash计算之后的hash值,而且hash值的大小关系并不和hash运算前的键值完全一样,所以数据库无法利用索引的数据来避免任何排序运算。
(3)Hash索引不能利用部分索引键查询,对于组合索引，Hash 索引在计算 Hash 值的时候是组合索引键合并后再一起计算 Hash 值，而不是单独计算 Hash 值，所以通过组合索引的前面一个或几个索引键进行查询的时候，Hash 索引也无法被利用。
(4)Hash索引在任何时候都不能避免表扫描,hash索引是将索引建通过hash运算之后,将<hash运算结果的hash值>和所对应的<行指针信息>存放于一个<hash表>中,由于不用索引键存在相同的hash值,所以即使取满足某个 Hash 键值的数据的记录条数，也无法从 Hash 索引中直接完成查询，还是要通过访问表中的实际数据进行相应的比较，并得到相应的结果。
(5)Hash索引遇到大量Hash值相等的情况后性能并不一定就会比B-tree索引高,对于选择性比较低的索引键，如果创建 Hash 索引，那么将会存在大量记录指针信息存于同一个 Hash 值相关联。这样要定位某一条记录时就会非常麻烦，会浪费多次表数据的访问，而造成整体性能低下。

Hash索引的过程：
当我们为某一列或某几列建立hash索引时(目前就只有memory引擎显式地支持这种索引),会在硬盘上生成类似如下文件:
|hash值|存储地址|
|1db54bc745a1|77#45b5|
|4bca452157d4|76#4556,77#45cc…|
…
hash值即为通过特定算法由指定列数据计算出来,磁盘地址即为所在数据行存储在硬盘上的地址(也有可能是其他存储地址,其实memory会将hash表导入内存)。
这样,当我们进行where age = 18时,会将18通过相同的算法计算出一个hash值==>再在hash表中找到对应的存储地址==>根据存储地址取得数据。
所以,每次查询时都要遍历hash表,直到找到对应的hash值,如(4),数据量大了之后,hash表也会变得庞大起来,性能下降,遍历耗时增加,如(5)。
====================================================================
Btree
btree索引就是一种将索引值按一定的算法,存入一个树形的数据结构中,每次查询都是从树的入口 root 开始，依次遍历 node，获取 leaf。
BTREE 在 MyISAM 里的形式和 Innodb 稍有不同。
在 Innodb 里，有两种形态：一是 primary key 形态，其 leaf node 里存放的是数据，而且不仅存放了索引键的数据，还存放了其他字段的数据。二是 secondary index，其 leaf node 和普通的 BTREE 差不多，只是还存放了指向主键的信息.

而在 MyISAM 里，主键和其他的并没有太大区别。不过和 Innodb 不太一样的地方是在 MyISAM 里，leaf node 里存放的不是主键的信息，而是指向数据文件里的对应数据行的信息.
====================================================================
Rtree
RTREE 在 mysql 很少使用，仅支持 geometry 数据类型，支持该类型的存储引擎只有 MyISAM、BDb、InnoDb、NDb、Archive 几种。

相对于 BTREE，RTREE 的优势在于范围查找.
各种索引的使用情况

（1）对于 BTREE 这种 Mysql 默认的索引类型，具有普遍的适用性

（2）由于 FULLTEXT 对中文支持不是很好，在没有插件的情况下，最好不要使用。其实，一些小的博客应用，只需要在数据采集时，为其建立关键字列表，通过关键字索引，也是一个不错的方法，至少愚安我是经常这么做的。

（3）对于一些搜索引擎级别的应用来说，FULLTEXT 同样不是一个好的处理方法，Mysql 的全文索引建立的文件还是比较大的，而且效率不是很高，即便是使用了中文分词插件，对中文分词支持也只是一般。真要碰到这种问题，Apache 的 Lucene 或许是你的选择。

（4）正是因为 hash 表在处理较小数据量时具有无可比拟的素的优势，所以 hash 索引很适合做缓存（内存数据库）。如 mysql 数据库的内存版本 Memsql，使用量很广泛的缓存工具 Mencached，NoSql 数据库 redis 等，都使用了 hash 索引这种形式。当然，不想学习这些东西的话 Mysql 的 MEMORY 引擎也是可以满足这种需求的。

（5）至于 RTREE，愚安我至今还没有使用过，它具体怎么样，我就不知道了。有 RTREE 使用经历的同学，到时可以交流下！





http://bbs.itmayiedu.com/article/1493258712545
















 







