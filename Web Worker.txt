							什么是 Web Worker
简单点说，Web Worker 就是一个运行在后台的 JavaScript 线程，不会影响页面的响应。

我们知道，JavaScript 是单线程的脚本语言，即同一时刻只能做一件事情，否则会带来极其复杂的同步问题。比如 JavaScript 同时有两个线程，一个线程负责给某个 DOM 节点添加内容，另一个线程删除这个节点，这时，浏览器要以哪个线程为主呢？

所以，为了避免同步复杂性的问题，JavaScript 从一诞生起就是单线程，这也是这门语言的特征。

JavaScript 的单线程机制会带来一个问题，当有一些非常复杂的任务需要处理时，页面不得不需要等待任务处理完成才能响应用户的操作，这对于页面的响应及用户体验都会带来一些负面的影响，为了解决这个问题，同时也是为了利用多核 CPU 的计算能力，HTML5 提出了 Web Worker 标准，允许 JavaScript 创建多个线程，但是新创建的这些线程将作为子线程并且完全受主线程的控制。并且不得操作 DOM，其实本质上还是单线程。 所以，我们可以把一些费时的任务交给 Web Worker 创建的子线程在后台完成，而前台页面依然可以处理用户的响应。

由于 Web Worker 创建的线程是受限的子线程，所以会有一些使用限制：

Web Worker 无法访问 DOM 节点；
Web Worker 无法访问全局变量或是全局函数；
Web Worker 无法调用 alert()或者 confirm 之类的函数；
Web Worker 无法访问 window、document 之类的浏览器全局变量；
不过 Web Worker 中的 Javascript 依然可以使用 setTimeout(),setInterval()之类的函数，也可以使用 XMLHttpRequest 对象来做 Ajax 通信。

目前所有主流浏览器均支持 web worker，除了 Internet Explorer。

熟悉 Angular 的朋友应该都清楚，Angular1 最被大家诟病就是它的脏检查机制，当 scope 的数据量过多时会严重影响性能。而 Angular2 正是借助 WebWorker 来把繁重的计算工作移入辅助线程，让界面线程不受影响。